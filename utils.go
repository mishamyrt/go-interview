package main

import (
	"errors"
	"fmt"
	"regexp"
)

// findTaskByID –∏—â–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID –≤ —Å—Ä–µ–∑–µ –∑–∞–¥–∞—á.
func findTaskByID(tasks []Task, id string) (*Task, error) {
	find := func(t Task) bool {
		return t.ID == id
	}
	for _, task := range tasks {
		if find(task) {
			return &task, nil
		}
	}
	return nil, errors.New("task not found")
}

// recursiveTaskFormatter –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –¥–æ–±–∞–≤–ª—è—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∫ –∫–∞–∂–¥–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.
func recursiveTaskFormatter(tasks []Task) []Task {
	if len(tasks) == 0 {
		return []Task{}
	}

	var mark string
	if tasks[0].Completed {
		mark = "‚úÖ"
	} else {
		mark = "üõë"
	}
	description := fmt.Sprintf("%s: %s", mark, tasks[0].Description)

	return append([]Task{
		{
			ID:          tasks[0].ID,
			Description: description,
			Completed:   tasks[0].Completed,
		},
	}, recursiveTaskFormatter(tasks[1:])...)
}

// sanitizeTaskDescription –æ—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
func sanitizeTaskDescription(description *string) error {
	re := regexp.MustCompile(`[!@#$%^&*()_+={}|[\]\\:;"'<>,.?/]`)
	*description = re.ReplaceAllString(*description, "")
	return nil
}
